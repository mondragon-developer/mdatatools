{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jmond\\\\mdatatools\\\\mdatatools\\\\src\\\\FeedbackForm.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\n// require('dotenv').config();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FeedbackForm = () => {\n  _s();\n  const [message, setMessage] = useState('');\n  const [email, setEmail] = useState('');\n  useEffect(() => {\n    const userEmail = process.env.REACT_APP_EMAIL_USER || 'j.mondragon@hotmail.com';\n    console.log('Email from env: ', process.env.REACT_APP_EMAIL_USER);\n    setEmail(userEmail);\n  }, []);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const feedback = {\n      email,\n      message\n    };\n    console.log('Sending feedback:', feedback);\n\n    // Send feedback to the backend\n    await fetch('/api/feedback', {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(feedback)\n    }).then(response => {\n      return response.text();\n    }).then(data => {\n      console.log('Response from server:', data);\n    }).catch(error => {\n      console.error('Error sending feedback:', error);\n    });\n    setMessage('');\n    alert('Thank you for your feedback!');\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"feedback-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Send Us Your Feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"hidden\",\n      id: \"email\",\n      name: \"email\",\n      value: email,\n      onChange: e => setEmail(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"message\",\n        children: \"Message:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n_s(FeedbackForm, \"b0GU8DgJELaM7ivDWxJ7q9mTWPw=\");\n_c = FeedbackForm;\nexport default FeedbackForm;\nvar _c;\n$RefreshReg$(_c, \"FeedbackForm\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","FeedbackForm","_s","message","setMessage","email","setEmail","userEmail","process","env","REACT_APP_EMAIL_USER","console","log","handleSubmit","e","preventDefault","feedback","fetch","method","headers","body","JSON","stringify","then","response","text","data","catch","error","alert","onSubmit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","id","name","value","onChange","target","htmlFor","required","_c","$RefreshReg$"],"sources":["C:/Users/jmond/mdatatools/mdatatools/src/FeedbackForm.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n// require('dotenv').config();\r\n\r\nconst FeedbackForm = () => {\r\n    const [message, setMessage ] = useState('');\r\n    const [email, setEmail ] = useState('')\r\n\r\n    useEffect(() => {\r\n      const userEmail = process.env.REACT_APP_EMAIL_USER || 'j.mondragon@hotmail.com';\r\n      console.log('Email from env: ', process.env.REACT_APP_EMAIL_USER);\r\n      setEmail(userEmail)\r\n    }, []);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const feedback = { \r\n          email,\r\n          message,\r\n         };\r\n\r\n         console.log('Sending feedback:', feedback);\r\n\r\n        // Send feedback to the backend\r\n        await fetch('/api/feedback', {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(feedback),\r\n          }).then(response => {\r\n            return response.text();\r\n          }).then(data => {\r\n            console.log('Response from server:', data);\r\n          }).catch(error => {\r\n            console.error('Error sending feedback:', error);\r\n          });\r\n\r\n            setMessage('');\r\n            alert('Thank you for your feedback!');\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className=\"feedback-form\">\r\n          <h2>Send Us Your Feedback</h2>\r\n            <input\r\n              type=\"hidden\"\r\n              id=\"email\"\r\n              name=\"email\"\r\n              value={ email }\r\n              onChange={(e) => setEmail(e.target.value)}\r\n            />\r\n          <div>\r\n            <label htmlFor=\"message\">Message:</label>\r\n            <textarea\r\n              value={ message }\r\n              onChange={(e) => setMessage(e.target.value)}\r\n              required\r\n            />\r\n          </div>\r\n          <button type=\"submit\">Submit</button>\r\n        </form>\r\n      );\r\n};\r\n\r\nexport default FeedbackForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}